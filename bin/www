#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("backend-api:server");
var http = require("http");
var socket = require("socket.io");
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "5000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

//Socket.io
let io = socket(server, {
  cors: {
    path: "/socket.io",
    origin: "http://localhost:4200",
    methods: ["GET", "POST"],
    credentials: true,
    transports: ["websocket", "polling"],
  },
});
//Listening for the connection event, and putting a message if connection happens.

// Connected Event
io.on("connection", (socket) => {
  console.log(`A user (${socket.id}) has finally connected!`);
  socket.emit(
    "test event",
    "This is the backend talking...Ya did it my guy!!!"
  );
  socket.on("msg", (data)=>{
    console.log(data);
    socket.emit('msg', data);
  })
});

io.on("connection", (socket) => {
  socket.on("msg", (data) => {
    io.emit('msg', data);
  });
});

// Disconnected Event
io.on("disconnect", (socket) => {
  console.log("A user has disconnected!");
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
